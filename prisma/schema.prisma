generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  sid           String    @id
  currentUserId String?
  lastLoggedIn  DateTime?
  userAgent     String?
  ipAddress     String
  savedAccounts String @default("")

  currentUser User? @relation(fields: [currentUserId], references: [id])

  @@map("sessions")
}

// TODO: think for the notification subscription model
model PushSubscription {
  id     String @id @default(cuid()) @map("_id")
  subscription  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("push_subscriptions")
}


model Account {
  id                String  @id @default(cuid()) @map("_id")
  providerAccountId String  @unique
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type              String
  provider          String
  accessToken       String? @map("access_token")
  expiresIn         Int?    @map("expires_in")
  tokenType         String? @map("token_type")
  scope             String

  @@map("accounts")
}

model User {
  id       String @id @default(cuid()) @map("_id")
  name     String
  picture  String
  username String?
  email    String @unique
  role     String @default("normaluser")
  password String
  vendorId String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  accounts          Account[]
  vendor                    Vendor                     @relation(fields: [vendorId], references: [id], onDelete: NoAction)
  Session                   Session[]
  pushSubscriptions PushSubscription[]

  PackagesUpdatedByUser Package[] @relation(name: "StatusUpdatedBy")
  PackagesForPickup     Package[] @relation(name: "PickupPerson")
  PackagesForDelivery   Package[] @relation(name: "DeliveryPerson")
  PackagesForReturn     Package[] @relation(name: "ReturnPerson")

  CustomerPaymentVerifiedBy     Package[] @relation(name: "CustomerPaymentVerifiedBy")
  VendorPaymentVerifiedBy     Package[] @relation(name: "VendorPaymentVerifiedBy")

  @@map("users")
}

model Vendor {
  id            String  @id @default(cuid()) @map("_id")
  vendorName    String
  vendorEmail   String
  vendorAddress String
  mainVendorId  String?
  User          User[]

  mainVendor Vendor?   @relation(name: "Vendor_Vendor", fields: [mainVendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subVendors Vendor[]  @relation(name: "Vendor_Vendor")
  packages   Package[]

  @@map("vendors")
}

model Package {
  id              String @id @default(cuid()) @map("_id")
  customerName    String
  customerNumber  String
  customerAddress String
  vendorId        String
  vendor          Vendor @relation(fields: [vendorId], references: [id])
  status          String @default("ORDER_CREATED")

  statusUpdatedBy String
  statusUpdatedAt DateTime @default(now())

  pickupPerson   String?
  deliveryPerson String?
  returnPerson   String?

  customerPaymentMethod     String    @default("NOT_PAID")
  customerPaymentVerifiedBy String?
  customerPaymentVerifiedAt DateTime?
  vendorPaymentMethod       String    @default("NOT_PAID")
  vendorPaymentVerifiedBy   String?
  vendorPaymentVerifiedAt   DateTime?

  cod            Float
  deliveryCharge Float @default(100)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  StatusUpdatedBy User  @relation(name: "StatusUpdatedBy", fields: [statusUpdatedBy], references: [id])
  PickupPerson    User? @relation(name: "PickupPerson", fields: [pickupPerson], references: [id])
  DeliveryPerson  User? @relation(name: "DeliveryPerson", fields: [pickupPerson], references: [id])
  ReturnPerson    User? @relation(name: "ReturnPerson", fields: [pickupPerson], references: [id])
  CustomerPaymentVerifiedBy User? @relation(name: "CustomerPaymentVerifiedBy", fields: [customerPaymentVerifiedBy], references: [id])
  VendorPaymentVerifiedBy User? @relation(name: "VendorPaymentVerifiedBy", fields: [customerPaymentVerifiedBy], references: [id])

  @@map("packages")
}


model Token {
  id         String @id @default(cuid()) @map("_id")
  identifier String
  tokenType  String
  token      String
  @@map("tokens")
}