import { fail } from "@sveltejs/kit";
import { redirect, setFlash } from "sveltekit-flash-message/server";
import { setError, superValidate } from "sveltekit-superforms/server";

import { mailer } from "$lib/utilities/mailer";
import { omit } from "$lib/utilities/functions";
import { prisma } from "$lib/utilities/prisma.server";
import { getCurrentUser } from "$lib/functions/auth.server";
import { updatePackageInfoSchema } from "$lib/utilities/zod-schema";
import { getPackageById } from "$lib/functions/package.server";

export async function load(event) {
  const { currentUser } = await event.parent();
  const form = await superValidate(updatePackageInfoSchema);

  if (!currentUser) {
    throw redirect(
      "/login",
      {
        id: "auth",
        type: "error",
        dismissable: false,
        message: "Please login to your account to continue."
      },
      event
    );
  }

  const packageInfo = await getPackageById(currentUser, event.params.id);

  if (!packageInfo) {
    throw redirect(
      "/packages",
      {
        type: "error",
        id: "packageInfo",
        dismissable: false,
        message: "Package details not found or was deleted!"
      },
      event
    );
  }

  form.data = {
    ...omit(packageInfo, ["vendor"]),
    vendorName: packageInfo.vendor.vendorName
  };

  return { form, packageInfo };
}

export const actions = {
  async default(event) {
    const currentUser = await getCurrentUser(event.locals.sid);
    const form = await superValidate(event.request, updatePackageInfoSchema);

    if (!form.valid) return fail(400, { form });

    const shouldRedirect = !event.request.headers.get("x-sveltekit-action");

    let mainVendorId: string | undefined = undefined;

    if (!currentUser) {
      throw redirect(
        "/login",
        {
          id: "auth",
          type: "error",
          message: "Please login to your account to continue.",
          dismissable: false
        },
        event
      );
    }

    const user = await getUserById(event.params.id);

    if (!user) {
      throw redirect(
        "/users",
        {
          id: "users",
          type: "error",
          dismissable: false,
          message: "User details not found or was deleted!"
        },
        event
      );
    }

    if (user.email !== form.data.email) {
      const emailExists = await prisma.user.count({
        where: { email: form.data.email }
      });
      if (emailExists) {
        setError(form, "email", "The email address is already in use.");
        return fail(400, { form });
      }
    }

    if (!!form.data.username) {
      if (user.username !== form.data.username) {
        const usernameExists = await prisma.user.count({
          where: { username: form.data.username }
        });

        if (usernameExists) {
          setError(form, "username", "This username is already taken.");
          return fail(400, { form });
        }
      }
    } else {
      form.data.username = undefined;
    }

    let vendorId: string | undefined = undefined;

    if (form.data.vendorName !== user.vendor.vendorName) {
      const vendorExists = await prisma.vendor.findFirst({
        where: { vendorName: form.data.vendorName },
        select: { id: true }
      });
      if (!vendorExists) {
        setError(form, "mainVendorName", "A vendor with provided name doesn't exists.");
        return fail(400, { form });
      } else {
        vendorId = vendorExists.id;
      }
    }

    let _autoGeneratedPassword = undefined;
    const { autoGeneratePassword, vendorName: _vn, confirmPassword: _cp, ...data } = form.data;

    if (autoGeneratePassword) {
      _autoGeneratedPassword = generatePassword(12);
      data.password = _autoGeneratedPassword;
    }

    if (!!data.password) {
      data.password = await hash(data.password);
    } else {
      // convert null password to undefined
      data.password = undefined;
    }

    const updatedUser = await prisma.user.update({
      data,
      where: { id: event.params.id }
    });

    if (_autoGeneratedPassword) {
      await mailer.sendMail({
        to: updatedUser.email,
        from: process.env.EMAIL_FROM,
        subject: `Password reset link`,
        html: `
        <span>Your password was reset by admin as per the request.</span>
        <span>Your new password (temporary) is: <b>${_autoGeneratedPassword}</b></span>
        <pre>Don't forget to change your password!</pre>
      `
      });
    }

    setFlash(
      {
        type: "success",
        id: "update-user",
        message: `The user details was updated successfully.`
      },
      event
    );

    if (shouldRedirect) {
      throw redirect(301, "/vendors");
    } else {
      return { form, updatedUser: await getUserById(event.params.id) };
    }
  }
};
